<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Averages', 'doctrine');

/**
 * BaseAverages
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $average
 * @property string $personid
 * @property string $personname
 * @property string $gender
 * @property integer $value1
 * @property integer $value2
 * @property integer $value3
 * @property integer $value4
 * @property integer $value5
 * @property string $personcountryid
 * @property string $continentid
 * @property string $eventid
 * @property string $competitionid
 * @property string $competitionname
 * @property integer $year
 * 
 * @method integer  getId()              Returns the current record's "id" value
 * @method integer  getAverage()         Returns the current record's "average" value
 * @method string   getPersonid()        Returns the current record's "personid" value
 * @method string   getPersonname()      Returns the current record's "personname" value
 * @method string   getGender()          Returns the current record's "gender" value
 * @method integer  getValue1()          Returns the current record's "value1" value
 * @method integer  getValue2()          Returns the current record's "value2" value
 * @method integer  getValue3()          Returns the current record's "value3" value
 * @method integer  getValue4()          Returns the current record's "value4" value
 * @method integer  getValue5()          Returns the current record's "value5" value
 * @method string   getPersoncountryid() Returns the current record's "personcountryid" value
 * @method string   getContinentid()     Returns the current record's "continentid" value
 * @method string   getEventid()         Returns the current record's "eventid" value
 * @method string   getCompetitionid()   Returns the current record's "competitionid" value
 * @method string   getCompetitionname() Returns the current record's "competitionname" value
 * @method integer  getYear()            Returns the current record's "year" value
 * @method Averages setId()              Sets the current record's "id" value
 * @method Averages setAverage()         Sets the current record's "average" value
 * @method Averages setPersonid()        Sets the current record's "personid" value
 * @method Averages setPersonname()      Sets the current record's "personname" value
 * @method Averages setGender()          Sets the current record's "gender" value
 * @method Averages setValue1()          Sets the current record's "value1" value
 * @method Averages setValue2()          Sets the current record's "value2" value
 * @method Averages setValue3()          Sets the current record's "value3" value
 * @method Averages setValue4()          Sets the current record's "value4" value
 * @method Averages setValue5()          Sets the current record's "value5" value
 * @method Averages setPersoncountryid() Sets the current record's "personcountryid" value
 * @method Averages setContinentid()     Sets the current record's "continentid" value
 * @method Averages setEventid()         Sets the current record's "eventid" value
 * @method Averages setCompetitionid()   Sets the current record's "competitionid" value
 * @method Averages setCompetitionname() Sets the current record's "competitionname" value
 * @method Averages setYear()            Sets the current record's "year" value
 * 
 * @package    iwca
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseAverages extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('Averages');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('average', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('personid', 'string', 10, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 10,
             ));
        $this->hasColumn('personname', 'string', 80, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 80,
             ));
        $this->hasColumn('gender', 'string', 6, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 6,
             ));
        $this->hasColumn('value1', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('value2', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('value3', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('value4', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('value5', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('personcountryid', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('continentid', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('eventid', 'string', 6, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 6,
             ));
        $this->hasColumn('competitionid', 'string', 32, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 32,
             ));
        $this->hasColumn('competitionname', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('year', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        
    }
}