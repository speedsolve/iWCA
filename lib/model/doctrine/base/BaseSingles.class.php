<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Singles', 'doctrine');

/**
 * BaseSingles
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $single
 * @property string $personid
 * @property string $gender
 * @property string $personname
 * @property string $personcountryid
 * @property string $continentid
 * @property string $competitionid
 * @property string $eventid
 * @property string $competitionname
 * @property string $countryid
 * @property integer $year
 * @property integer $month
 * @property integer $day
 * @property integer $endmonth
 * @property integer $endday
 * @property integer $id
 * 
 * @method integer getSingle()          Returns the current record's "single" value
 * @method string  getPersonid()        Returns the current record's "personid" value
 * @method string  getGender()          Returns the current record's "gender" value
 * @method string  getPersonname()      Returns the current record's "personname" value
 * @method string  getPersoncountryid() Returns the current record's "personcountryid" value
 * @method string  getContinentid()     Returns the current record's "continentid" value
 * @method string  getCompetitionid()   Returns the current record's "competitionid" value
 * @method string  getEventid()         Returns the current record's "eventid" value
 * @method string  getCompetitionname() Returns the current record's "competitionname" value
 * @method string  getCountryid()       Returns the current record's "countryid" value
 * @method integer getYear()            Returns the current record's "year" value
 * @method integer getMonth()           Returns the current record's "month" value
 * @method integer getDay()             Returns the current record's "day" value
 * @method integer getEndmonth()        Returns the current record's "endmonth" value
 * @method integer getEndday()          Returns the current record's "endday" value
 * @method integer getId()              Returns the current record's "id" value
 * @method Singles setSingle()          Sets the current record's "single" value
 * @method Singles setPersonid()        Sets the current record's "personid" value
 * @method Singles setGender()          Sets the current record's "gender" value
 * @method Singles setPersonname()      Sets the current record's "personname" value
 * @method Singles setPersoncountryid() Sets the current record's "personcountryid" value
 * @method Singles setContinentid()     Sets the current record's "continentid" value
 * @method Singles setCompetitionid()   Sets the current record's "competitionid" value
 * @method Singles setEventid()         Sets the current record's "eventid" value
 * @method Singles setCompetitionname() Sets the current record's "competitionname" value
 * @method Singles setCountryid()       Sets the current record's "countryid" value
 * @method Singles setYear()            Sets the current record's "year" value
 * @method Singles setMonth()           Sets the current record's "month" value
 * @method Singles setDay()             Sets the current record's "day" value
 * @method Singles setEndmonth()        Sets the current record's "endmonth" value
 * @method Singles setEndday()          Sets the current record's "endday" value
 * @method Singles setId()              Sets the current record's "id" value
 * 
 * @package    iwca
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseSingles extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('Singles');
        $this->hasColumn('single', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('personid', 'string', 10, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 10,
             ));
        $this->hasColumn('gender', 'string', 6, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 6,
             ));
        $this->hasColumn('personname', 'string', 80, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 80,
             ));
        $this->hasColumn('personcountryid', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('continentid', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('competitionid', 'string', 32, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 32,
             ));
        $this->hasColumn('eventid', 'string', 6, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 6,
             ));
        $this->hasColumn('competitionname', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('countryid', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('year', 'integer', 2, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 2,
             ));
        $this->hasColumn('month', 'integer', 2, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 2,
             ));
        $this->hasColumn('day', 'integer', 2, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 2,
             ));
        $this->hasColumn('endmonth', 'integer', 2, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 2,
             ));
        $this->hasColumn('endday', 'integer', 2, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 2,
             ));
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        
    }
}